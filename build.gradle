plugins {
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.kotlin.android) apply false
    alias(libs.plugins.kotlin.parcelize) apply false
    alias(libs.plugins.kotlin.kapt) apply false
    alias(libs.plugins.kotlin.ksp) apply false
    alias(libs.plugins.ktlint.gradle)
    alias(libs.plugins.gradleVersions)
    alias(libs.plugins.detekt)
}

subprojects {
    // KTLint (Kotlin code style enforcer)
    apply(plugin: libs.plugins.ktlint.gradle.get().pluginId)
    ktlint {
        outputToConsole = true
    }

    // Detekt (Kotlin static analyser)
    apply(plugin: libs.plugins.detekt.get().pluginId)
    detekt {
        // Include all rules
        allRules = true
        // preconfigure defaults (see the rule set file below for explanations)
        buildUponDefaultConfig = true
        // point to your custom config defining rules to run, overwriting default behavior
        config.setFrom("${project.rootDir}/config/detekt/detekt-config.yaml")
    }

    tasks.named("detekt").configure {
        jvmTarget = libs.versions.jvmTarget.get()
        reports {
            html.required.set(true)
            xml.required.set(false)
            txt.required.set(false)
        }
    }

    afterEvaluate {
    // Make sure detekt is executed with all the other linters for all modules
    check.dependsOn "detekt"
}

tasks.register('checkCode') {
    group = "Verification"
    description = "Run detekt, ktlint and CheckStyle."
    dependsOn "detekt", "ktlintCheck", "checkstyle"
}

// Mockito
// https://javadoc.io/doc/org.mockito/mockito-core/latest/org.mockito/org/mockito/Mockito.html#0.3
// https://github.com/gradle/gradle/issues/2298
// Also see dependencies.gradle for additional configuration
configurations {
    mockitoAgent
}
tasks {
    tasks.withType(Test).tap {
        configureEach {
            jvmArgs += "-javaagent:${configurations.mockitoAgent.asPath}"
        }
    }
}
}

tasks.register('clean', Delete) {
    group = "Build"
    description = "Delete the build directory. Useful if you need to make a clean build."
    delete rootProject.layout.buildDirectory
}

// Don't show non stable updates for current stable versions
def isNonStable = { String version ->
    def stableKeyword = ["RELEASE", "FINAL", "GA"].any { keyword -> version.toUpperCase().contains(keyword) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    checkForGradleUpdate = true

    resolutionStrategy {
        componentSelection {
            all {
                if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
                    reject("Release candidate")
                }
            }
        }
    }
}
